"use client"

import { useState } from "react"
import { Medal, Trophy, Award, Keyboard } from "lucide-react"
import { Card, CardContent } from "@/components/ui/card"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import UserBadges from "@/components/user-badges"

type KeydownPlayer = {
  id: number
  name: string
  keydowns: number
  wpm: number
  avatar?: string // Tornando avatar opcional
  change: "up" | "down" | "same"
}

// Frases para os primeiros colocados
const topTyperQuotes = [
  "Seus dedos s√£o mais r√°pidos que a velocidade da luz! Seu m√©dico de RSI agradece! üöÄ",
  "Voc√™ √© o Mozart do teclado! Infelizmente, seu c√≥digo ainda tem bugs... üéπ",
  "Campe√£o de digita√ß√£o! Seu teclado pediu f√©rias remuneradas! ‚å®Ô∏è",
  "Seus dedos s√£o t√£o r√°pidos que a f√≠sica qu√¢ntica n√£o consegue acompanhar! ‚ö°",
  "Primeiro lugar! Seu teclado est√° considerando pedir uma ordem de restri√ß√£o! üèÜ",
  "Voc√™ digita t√£o r√°pido que seu antiv√≠rus detectou seus dedos como amea√ßa! ü¶†",
  "Velocidade impressionante! Seu seguro de sa√∫de acabou de aumentar a cobertura para s√≠ndrome do t√∫nel do carpo! ü©∫",
]

// Frases para segundo e terceiro lugares
const runnerUpTyperQuotes = [
  "Quase l√°! Mais alguns energy drinks e voc√™ chega ao primeiro lugar! ‚ö°",
  "Prata/Bronze na digita√ß√£o! Ouro em ignorar os sinais de tendinite! ü•à",
  "Seus dedos est√£o quase pegando fogo! Seu extintor est√° pronto? üî•",
  "T√£o perto do topo! Seu teclado est√° torcendo por voc√™ (e por uma limpeza)! üßπ",
  "Posi√ß√£o honrosa! Seu ortopedista tamb√©m est√° orgulhoso do seu neg√≥cio! üë®‚Äç‚öïÔ∏è",
  "Voc√™ √© quase o mais r√°pido! Seu corretor ortogr√°fico n√£o consegue acompanhar! üìù",
  "Medalha de prata/bronze em digita√ß√£o! Tamb√©m merece ouro em consumo de caf√©! ‚òï",
]

// Frases para posi√ß√µes intermedi√°rias (4-10)
const midTyperQuotes = [
  "Velocidade m√©dia, erros de digita√ß√£o acima da m√©dia! Perfeitamente equilibrado! üßò‚Äç‚ôÇÔ∏è",
  "Voc√™ est√° no meio do pelot√£o! Seu teclado agradece o ritmo moderado! ‚å®Ô∏è",
  "Nem t√£o r√°pido, nem t√£o devagar. Como um bom algoritmo de busca bin√°ria! üîç",
  "Digita√ß√£o decente! Seu corretor ortogr√°fico ainda consegue acompanhar... por enquanto! üìù",
  "Voc√™ est√° no caminho certo! Seus dedos tamb√©m est√£o no caminho certo para a fisioterapia! üëÜ",
  "Velocidade m√©dia! Como seu caf√©: forte o suficiente para manter voc√™ acordado! ‚òï",
  "Posi√ß√£o intermedi√°ria! Seu teclado ainda tem todas as letras vis√≠veis! üî§",
]

// Frases para posi√ß√µes mais baixas (>10)
const lowerTyperQuotes = [
  "Ei, qualidade √© melhor que quantidade! (√â o que dizemos para nos sentirmos melhor) üê¢",
  "Digita√ß√£o lenta, pensamento profundo! Einstein tamb√©m n√£o era conhecido por digitar r√°pido! üß†",
  "Voc√™ est√° economizando a vida √∫til do seu teclado! Estrat√©gia de longo prazo! üìà",
  "Seus dedos est√£o no modo econ√¥mico! Preservando energia para o sprint final! üîã",
  "Digita√ß√£o sustent√°vel! Seu teclado vai durar mais que os dos outros competidores! ‚ôªÔ∏è",
  "Voc√™ prefere pensar duas vezes e digitar uma! Sabedoria acima da velocidade! ü¶â",
  "Posi√ß√£o modesta, mas seu c√≥digo provavelmente tem menos bugs que o do primeiro lugar! üêõ",
]

// Frases gerais que podem ser usadas para qualquer posi√ß√£o
const generalTyperQuotes = [
  "Cada tecla pressionada √© um passo a mais para a s√≠ndrome do t√∫nel do carpo! ü§ï",
  "Seu teclado conhece seus segredos melhor que seu terapeuta! üõãÔ∏è",
  "Voc√™ j√° digitou o suficiente para escrever 'Guerra e Paz' tr√™s vezes! Tolst√≥i estaria orgulhoso! üìö",
  "Tantas teclas pressionadas e ainda assim seu bug persiste! Ir√¥nico, n√£o? üêû",
  "Seu teclado merece um aumento de sal√°rio pelo trabalho extra! üí∞",
  "Voc√™ j√° digitou o suficiente para fazer seu m√©dico comprar um iate! üõ•Ô∏è",
  "Impressionante! Seus dedos t√™m mais quilometragem que seu carro! üöó",
]

export default function KeydownRankingCard({ player, index }: { player: KeydownPlayer; index: number }) {
  // Selecionar uma frase aleat√≥ria com base na posi√ß√£o
  let quotePool: string[] = []

  if (index === 0) {
    quotePool = topTyperQuotes
  } else if (index === 1 || index === 2) {
    quotePool = runnerUpTyperQuotes
  } else if (index >= 3 && index <= 9) {
    quotePool = midTyperQuotes
  } else {
    quotePool = lowerTyperQuotes
  }

  // Adicionar frases gerais ao pool para aumentar a variedade
  quotePool = [...quotePool, ...generalTyperQuotes]

  // Selecionar uma frase aleat√≥ria do pool
  const randomIndex = Math.floor(Math.random() * quotePool.length)
  const initialQuote = quotePool[randomIndex] || ""

  const [randomQuote] = useState(initialQuote)

  // Verificar se player existe antes de continuar
  if (!player) {
    return <div>Dados do jogador n√£o dispon√≠veis</div>
  }

  // Extrair as iniciais do nome para o fallback do avatar
  const initials = player.name ? player.name.substring(0, 2).toUpperCase() : "??"

  return (
    <Card
      className={`overflow-hidden transition-all hover:shadow-md ${index < 3 ? "border-2" : ""} ${
        index === 0 ? "border-yellow-500" : index === 1 ? "border-slate-400" : index === 2 ? "border-amber-700" : ""
      }`}
    >
      <CardContent className="p-0">
        <div className="flex items-center p-4">
          <div className="flex items-center justify-center w-10 mr-4 font-bold text-lg">
            {index === 0 ? (
              <Trophy className="h-6 w-6 text-yellow-500" />
            ) : index === 1 ? (
              <Medal className="h-6 w-6 text-slate-400" />
            ) : index === 2 ? (
              <Award className="h-6 w-6 text-amber-700" />
            ) : (
              <span className="text-muted-foreground">{index + 1}</span>
            )}
          </div>

          <Avatar className="h-10 w-10 mr-4">
            <AvatarImage src={player.avatar || "/placeholder.svg"} alt={player.name || "Usu√°rio"} />
            <AvatarFallback>{initials}</AvatarFallback>
          </Avatar>

          <div className="flex-1">
            <div className="font-medium">{player.name || "Usu√°rio An√¥nimo"}</div>
            <div className="flex items-center gap-2 mt-1">
              <Keyboard className="h-3.5 w-3.5 text-slate-500" />
              <div className="flex items-baseline">
                <span className="font-medium text-foreground">{player.keydowns.toLocaleString()}</span>
                <span className="ml-2 text-xs text-slate-500">
                  <span className="font-semibold">{player.wpm}</span> WPM
                </span>
              </div>
            </div>

            {/* Adicionando apenas o √∫ltimo badge do usu√°rio */}
            <div className="mt-1">
              <UserBadges userKeydowns={player.keydowns} showOnlyLast={true} type="keydowns" />
            </div>
          </div>

          <div className="ml-auto flex items-center">
            {player.change === "up" && (
              <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
                ‚ñ≤ Subiu
              </Badge>
            )}
            {player.change === "down" && (
              <Badge variant="outline" className="bg-red-50 text-red-700 border-red-200">
                ‚ñº Desceu
              </Badge>
            )}
            {player.change === "same" && (
              <Badge variant="outline" className="bg-slate-50 text-slate-700 border-slate-200">
                ‚óè Manteve
              </Badge>
            )}
          </div>
        </div>

        {/* Frase aleat√≥ria baseada na posi√ß√£o */}
        <div className="px-4 pb-3 pt-0">
          <p className="text-xs italic text-muted-foreground">{randomQuote}</p>
        </div>
      </CardContent>
    </Card>
  )
}
